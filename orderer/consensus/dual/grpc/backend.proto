syntax = "proto3";
package grpc;
import "protos/common/common.proto";

// generate :protoc --go_out=plugins=grpc:. *.proto

/*
protoc --go_out=plugins=grpc:./orderer/consensus/dual/grpc -I. ./orderer/consensus/dual/grpc/backend.proto
*/
//option objc_class_prefix = "HLW";

/*message HelloRequest {
  string greeting = 1;
}

message HelloResponse {
  string reply = 1;
  repeated int32 number=4;
}

service HelloService {
  rpc SayHello(HelloRequest) returns (HelloResponse){}
}*/
// Envelope wraps a Payload with a signature so that the message may be authenticated

message PeerRequest {
    string greeting = 1;
  }
message PeerInfoResponse{
   int32 seralizedId=1;
   float credit=2;
   bool amIprimary=3;
}
message IwantToBePrimaryRequest{
   int32 seralizedId=1;
   float credit=2;
}
message IwantToBePrimaryResponse{
  bool success=1;
}
message HaltMessageRequest{
  common.Envelope msg=1;
}
message HaltMessageResponse{
  bool success=1;
}
message SendChainMessageRequest{
  common.Envelope env=1;
}
message SendChainMessageResponse{
  bool success=1;
}
/*message SendChainReadMessageRequest{
  Envelope env=1;
}
message SendChainReadMessageResponse{
  bool success=1;
}*/
message WrittenChainMessageRequest{
  common.Envelope env=1;
}
message WrittenChainMessageResponse{
  bool success=1;
}
/*message WrittenChainReadMessageRequest{
  Envelope env=1;
}
message WrittenChainReadMessageResponse{
  bool success=1;
}*/
message PreOnChainRequest{
  common.Envelope env=1;
}
message PreOnChainResponse{
  bool success=1;
}
service BackendService{
   rpc getPeerInfo(PeerRequest) returns (PeerInfoResponse){}
   rpc IwantoBePrimary(IwantToBePrimaryRequest) returns (IwantToBePrimaryResponse){}
   rpc SendChainMessage(common.Envelope) returns(SendChainMessageResponse){}
   rpc WrittenChainMessage(common.Envelope) returns(WrittenChainMessageResponse){}

}